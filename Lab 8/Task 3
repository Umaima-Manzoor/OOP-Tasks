#include <iostream>
using namespace std;

class Vector2D {
	private:
	    float x;
	    float y;
	
	public:
	    Vector2D(float x_coord = 0, float y_coord = 0) : x(x_coord), y(y_coord) {}
	
	    
	    Vector2D operator+(const Vector2D& obj) const {
	        return Vector2D(x + obj.x, y + obj.y);
	    }
	
	    Vector2D operator-(const Vector2D& obj) const {
	        return Vector2D(x - obj.x, y - obj.y);
	    }
	
	    Vector2D operator*(float scalar) const {
	        return Vector2D(x * scalar, y * scalar);
	    }
	
	    friend float dotProduct(const Vector2D& v1, const Vector2D& v2);
	
	    friend ostream& operator<<(ostream& os, const Vector2D& v) {
	        os << "(" << v.x << ", " << v.y << ")";
	        return os;
	    }
};


float dotProduct(const Vector2D& v1, const Vector2D& v2) {
    return (v1.x * v2.x + v1.y * v2.y);
}

int main() {
   
    Vector2D v1(3.0, 4.0);
    Vector2D v2(1.0, 2.0);

    cout << "Vector v1: " << v1 << endl;
    cout << "Vector v2: " << v2 << endl<<endl;

    
    Vector2D sum = v1 + v2;
    cout << "Vector Addition (v1 + v2): " << sum << endl;


    Vector2D diff = v1 - v2;
    cout << "Vector Subtraction (v1 - v2): " << diff << endl;


    float scalar = 2.5;
    Vector2D scaled = v1 * scalar;
    cout << "Scalar Multiplication (v1 * " << scalar << "): " << scaled << endl;


    float dot = dotProduct(v1, v2);
    cout << "Dot Product (v1 dot v2): " << dot << endl;

    return 0;
}
