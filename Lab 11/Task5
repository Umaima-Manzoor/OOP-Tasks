#include <iostream>
#include <stdexcept>
using namespace std;

class NegativeStockException : public exception {};

class OverCapacityException : public exception {};


template <typename T>
class InventoryItem {
    private:
        T stock;
        T limit;
        
    public:
        InventoryItem(T max) : limit(max), stock(0) {}
        
        void setStock(T newStock) {
            if (newStock < 0) {
                throw NegativeStockException();
            }
            if (newStock > limit) {
                throw OverCapacityException();
            }

            stock = newStock;
        }
        
        T getStock() const { 
            return stock; 
        }

        T getMaxCapacity() const { 
            return limit; }
};

int main() {
    InventoryItem<int> item(100);
    
    try {
        cout << "Attempting to set stock to -5..." << endl;
        item.setStock(-5);
    }
    catch (const exception& e) {
        cout << "Caught NegativeStockException - what(): " << e.what() << endl;
    }
    
    try {
        cout << "Attempting to set stock to 120 (max 100)..." << endl;
        item.setStock(120);
    }
    catch (const exception& e) {
        cout << "Caught OverCapacityException - what(): " << e.what() << endl;
    }
}
