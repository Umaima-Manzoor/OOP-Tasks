#include <iostream>
#include <stdexcept>
#include <sstream>

using namespace std;

class DimensionMismatchException : public exception {
private:
    string message;

public:
    DimensionMismatchException(int rowsA, int colsA, int rowsB, int colsB) {
        ostringstream oss;
        oss << "DimensionMismatchException - Matrices must have the same dimensions ("
            << rowsA << "x" << colsA << " vs " << rowsB << "x" << colsB << ")!";
        message = oss.str();
    }

    string what()  {
        return message;
    }
};

template <typename T>
class Matrix {
private:
    T** data; 
    int rows, cols;

public:

    Matrix(int rows=0, int cols=0) : rows(rows), cols(cols) {
        data = new T*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new T[cols]();
        }
    }

    ~Matrix() {
        for (int i = 0; i < rows; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }

    void set(int row, int col, T value) {
        data[row][col] = value;
    }

    T get(int row, int col) const {
        return data[row][col];
    }

    int getRows() const {
        return rows;
    }

    int getCols() const {
        return cols;
    }

    Matrix<T> operator+(const Matrix<T>& other) const {
        if (rows != other.getRows() || cols != other.getCols()) {
            throw DimensionMismatchException(rows, cols, other.getRows(), other.getCols());
        }

        Matrix<T> result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.set(i, j, data[i][j] + other.get(i, j));
            }
        }
        return result;
    }

    void print() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    try {
        
        Matrix<int> matrixA(2, 2);
        Matrix<int> matrixB(3, 3);

        
        matrixA.set(0, 0, 1);
        matrixA.set(0, 1, 2);
        matrixA.set(1, 0, 3);
        matrixA.set(1, 1, 4);

        
        matrixB.set(0, 0, 5);
        matrixB.set(0, 1, 6);
        matrixB.set(0, 2, 7);
        matrixB.set(1, 0, 8);
        matrixB.set(1, 1, 9);
        matrixB.set(1, 2, 10);
        matrixB.set(2, 0, 11);
        matrixB.set(2, 1, 12);
        matrixB.set(2, 2, 13);

        
        Matrix<int> result = matrixA + matrixB;

        
        result.print();
    } catch (DimensionMismatchException& e) {
        cout << e.what() << endl;
    }

    return 0;
}
